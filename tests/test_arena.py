from pkmn_rl_arena import (
    ROM_PATH,
    BIOS_PATH,
    MAP_PATH,
)
from pkmn_rl_arena import logger
from pkmn_rl_arena.env.battle_core import BattleCore, TurnType
from pkmn_rl_arena.env.battle_arena import BattleArena
from pkmn_rl_arena.env.pkmn_team_factory import DataSize
from pkmn_rl_arena.data import pokemon_data

from pettingzoo.test import parallel_api_test

import unittest
import picologging as logging

from typing import Dict


class TestArena(unittest.TestCase):
    def setUp(self):
        logger.setLevel(logging.DEBUG)
        core = BattleCore(ROM_PATH, BIOS_PATH, MAP_PATH)
        self.arena = BattleArena(core)
        self.required_agents = self.arena.battle_state.get_required_agents()

    def tearDown(self):
        BattleArena.close()

    def test_step(self):
        for agent in self.arena.battle_state.get_required_agents():
            observation, reward, termination, truncation, info = self.arena.last()

            if termination or truncation:
                action = None
            else:
                # insert neural network here to choose action from observation space
                #
                # until then here is a dummy fctn
                action[agent] = self.arena.action_space(agent).sample()

        self.arena.step(action)

    def test_reset(self):
        required_agents = self.arena.battle_state.get_required_agents()
        action: Dict[str, int] | None = {} if required_agents == [] else None

        for agent in required_agents:
            observation, reward, termination, truncation, info = self.arena.last()

            if not (termination or truncation):
                action = None
                break
            else:
                # insert neural network here to choose action from observation space
                #
                # until then here is a dummy fctn
                action[agent] = self.arena.action_space(agent).sample()

        self.arena.step(action)
        self.arena.reset()

    # def test_load_save_state():
    #     pass

    # def test_render(self):
    #     self.arena.reset(seed=42)
    #     self.arena.render()




class TestResetOptions(unittest.TestCase):
    def setUp(self):
        logger.setLevel(logging.DEBUG)
        core = BattleCore(ROM_PATH, BIOS_PATH, MAP_PATH)
        self.arena = BattleArena(core)
        self.required_agents = self.arena.battle_state.get_required_agents()

    def tearDown(self):
        BattleArena.close()

    def test_load_savestate(self):
        """
        Testing :
            1. Generate random team data (8*6 params)
            2. Writes it to gba
            5. Read pkmn teams data generated by the game from pkmn params
            6. Ensures data matches grondtruth

        Functions called:
            - PkmnTeamFactory.Create_random_team()
            - BattleArena.reset() with a random generated team()
            - pkmn_data.to_pandas_team_dump_data()
            - BattleArena.create_teams()

        Ground Truth :
            - Team generated with team_factory
        """
        options = {
            "save_state": "boot_state",
        }
        self.arena.reset(options=options)
        self.assertEqual(self.arena.battle_state.current_turn, TurnType.GENERAL)
        return

    def test_create_team(self):
        """
        Testing :
            1. Generate random team data (8*6 params)
            2. Writes it to gba
            5. Read pkmn teams data generated by the game from pkmn params
            6. Ensures data matches grondtruth

        Functions called:
            - PkmnTeamFactory.Create_random_team()
            - BattleArena.reset() with a random generated team()
            - pkmn_data.to_pandas_team_dump_data()
            - BattleArena.create_teams()

        Ground Truth :
            - Team generated with team_factory
        """
        options = {
            "teams": {
                "player": self.arena.team_factory.create_random_team(),
                "enemy": self.arena.team_factory.create_random_team(),
            },
        }
        self.arena.reset(options=options)
        self.assertEqual(self.arena.battle_state.current_turn, TurnType.GENERAL)

        for agent in self.arena.possible_agents:
            ground_truth_team_params = options["teams"][agent]

            gba_read_team_data = self.arena.core.read_team_data(agent)
            gba_read_team_df = pokemon_data.to_pandas_team_dump_data(gba_read_team_data)

            for i in range(6):
                start = i * DataSize.PKMN
                self.assertEqual(
                    gba_read_team_df.iloc[i]["id"],
                    ground_truth_team_params[start],
                    f"{agent} team ID mismatch at pokemon {i}.",
                )
                self.assertEqual(
                    gba_read_team_df.iloc[i]["level"],
                    ground_truth_team_params[start + 1],
                    f"{agent} team level mismatch at pokemon {i}.",
                )
                self.assertEqual(
                    gba_read_team_df.iloc[i]["moves"],
                    ground_truth_team_params[start + 2 : start + 6],
                    f"{agent} team moves mismatch at pokemon {i}.",
                )
                self.assertEqual(
                    gba_read_team_df.iloc[i]["held_item"],
                    ground_truth_team_params[start + 7],
                    f"{agent} team item mismatch at pokemon {i}.",
                )

    def test_reset_with_invalid_pkmn_params(self):
        """
        Trying to create a squirtle with GROWL even if its not in squirtle movepool
        """
        options = {
            "save_state": "boot_state",
            "teams": {
                "player": [
                    7,
                    2,
                    45,
                    45,
                    45,
                    45,
                    10,
                    0,
                ],
                "enemy": None,
            },
        }

        # This test case Pikachu has 100% chance to faint
        with self.assertRaises(ValueError) as context_manager:
            self.arena.reset(options=options)
        self.assertEqual(
            str(context_manager.exception), 'Invalid reset param : "team".'
        )



if __name__ == "__main__":
    suite = unittest.TestSuite()
